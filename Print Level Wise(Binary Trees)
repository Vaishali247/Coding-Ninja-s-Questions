For a given a Binary Tree of type integer, print the complete information of every node, when traversed in a level-order fashion.
Sample Input 1:
8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
 Sample Output 1:
8:L:3,R:10
3:L:1,R:6
10:L:-1,R:14
1:L:-1,R:-1
6:L:4,R:7
14:L:13,R:-1
4:L:-1,R:-1
7:L:-1,R:-1
13:L:-1,R:-1
Sample Input 2:
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
 Sample Output 2:
1:L:2,R:3
2:L:4,R:5
3:L:6,R:7
4:L:-1,R:-1
5:L:-1,R:-1
6:L:-1,R:-1
7:L:-1,R:-1

//CODE

/********************

	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

*********************/
#include<queue>
void printLevelWise(BinaryTreeNode<int> *root) {
	queue<BinaryTreeNode<int>*> pendingnodes;
    pendingnodes.push(root);
    while(!pendingnodes.empty())
    {
        BinaryTreeNode<int>* front = pendingnodes.front();
        cout<<front->data<<":";
        pendingnodes.pop();
        if(front->left != NULL)
        {
            cout<<"L:"<<front->left->data;
            pendingnodes.push(front->left);
        }
        else
            cout<<"L:-1";
        if(front->right!=NULL)
        {
            cout<<",R:"<<front->right->data<<endl;
            pendingnodes.push(front->right);
        }
        else
            cout<<",R:-1"<<endl;
    }
}
