You have been given a sorted(in ascending order) integer array/list(ARR) of size N and an element X. 
Write a function to search this element in the given input array/list using 'Binary Search'. 
Return the index of the element in the input array/list. In case the element is not present in the array/list, then return -1.
Sample Input 1:
7
1 3 7 9 11 12 45
1
3
Sample Output 1:
1
Sample Input 2:
7
1 2 3 4 5 6 7
2
9
7
Sample Output 2:
-1
6

//CODE

#include <iostream>
using namespace std;

#include "solution.h"

int binarySearch(int *input, int n, int val)
{
    int l=0,u,m;  //l=lower index and u=upper index, m=middle index
    u=n-1;
    while(l<=u){
        m=(l+u)/2;
        if(val==input[m]){
            // cout<<input[m];
            return m;
        }
        else if(val>input[m])
            l=m+1;
        else
            u=m-1;
    }
    return -1;
}

int main()
{

	int size;
	cin >> size;
	int *input = new int[size];

	for(int i = 0; i < size; ++i)
	{
		cin >> input[i];
	}
	
	int t;
	cin >> t;

	while (t--)
	{
		int val;
		cin >> val;
		cout << binarySearch(input, size, val) << endl;
	}
	
	delete [] input;
	return 0;
}
