For a given expression in the form of a string, find the minimum number of brackets that can be reversed in order to make the expression balanced. 
The expression will only contain curly brackets. If the expression can't be balanced, return -1.
Example:
Expression: {{{{
If we reverse the second and the fourth opening brackets, the whole expression will get balanced. 
Since we have to reverse two brackets to make the expression balanced, the expected output will be 2.

Expression: {{{
In this example, even if we reverse the last opening bracket, we would be left with the first opening bracket and hence will not be able to make the expression balanced and the output will be -1.

Sample Input 1:
{{{
Sample Output 1:
-1
Sample Input 2:
{{{{}}
Sample Output 2:
1

//CODE

#include<stack>
int countBracketReversals(string input) 
{
	if(input.length() % 2!=0)//if no. of brackets are odd then surely its imbalanced forever
        return -1;
    stack<char> s;
    for(int i=0; i<input.length(); i++)
    {
       if(input[i]=='{')
            s.push(input[i]);
        else 
        {
            if(!s.empty()&&s.top()=='{')
                s.pop();
            else
                s.push(input[i]);
        }
    }
    //till now all the balanced pairs are removed from string..which were in this format {}
    //now remaining can be in the formates like- {{....or }{
    //so for first format we have to make one revrsal...and for second two reversals
    int x=0;
    while(s.empty()==false)
    {
        char c1 = s.top();
        s.pop();
        char c2 = s.top();
        s.pop();
        if(c1==c2)
            x++;
        else
            x=x+2;
    }
    return x;
}
